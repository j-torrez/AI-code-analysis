{"ast":null,"code":"export class SelectionText {\n  constructor(elm) {\n    this.elm = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.value = void 0;\n    var {\n      selectionStart,\n      selectionEnd\n    } = elm;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n  position(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n    this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n    this.elm.selectionStart = this.start;\n    this.elm.selectionEnd = this.end;\n    return this;\n  }\n  insertText(text) {\n    // Most of the used APIs only work with the field selected\n    this.elm.focus();\n    this.elm.setRangeText(text);\n    this.value = this.elm.value;\n    this.position();\n    return this;\n  }\n  getSelectedValue(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    return this.value.slice(typeof start === 'number' && !isNaN(start) ? start : selectionStart, typeof end === 'number' && !isNaN(end) ? start : selectionEnd);\n  }\n  getLineStartNumber() {\n    var start = this.start;\n    while (start > 0) {\n      start--;\n      if (this.value.charAt(start) === '\\n') {\n        start++;\n        break;\n      }\n    }\n    return start;\n  }\n  /** Indent on new lines */\n  getIndentText() {\n    var start = this.getLineStartNumber();\n    var str = this.getSelectedValue(start);\n    var indent = '';\n    str.replace(/(^(\\s)+)/, (str, old) => indent = old);\n    return indent;\n  }\n  lineStarInstert(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => text + txt).join('\\n')).position(oldStart + text.length, this.end);\n    }\n    return this;\n  }\n  lineStarRemove(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      var reg = new RegExp(\"^\" + text, 'g');\n      var newStart = oldStart - text.length;\n      if (!reg.test(str)) {\n        newStart = oldStart;\n      }\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => txt.replace(reg, '')).join('\\n')).position(newStart, this.end);\n    }\n  }\n  /** Notify any possible listeners of the change */\n  notifyChange() {\n    var event = new Event('input', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.elm.dispatchEvent(event);\n  }\n}","map":{"version":3,"names":["SelectionText","constructor","elm","start","end","value","selectionStart","selectionEnd","position","isNaN","insertText","text","focus","setRangeText","getSelectedValue","slice","getLineStartNumber","charAt","getIndentText","str","indent","replace","old","lineStarInstert","oldStart","split","map","txt","join","length","lineStarRemove","reg","RegExp","newStart","test","notifyChange","event","Event","bubbles","cancelable","dispatchEvent"],"sources":["/Users/johnbosco/Documents/project_se/software_engineer_project/frontend/node_modules/@uiw/react-textarea-code-editor/esm/SelectionText.js"],"sourcesContent":["export class SelectionText {\n  constructor(elm) {\n    this.elm = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.value = void 0;\n    var {\n      selectionStart,\n      selectionEnd\n    } = elm;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n  position(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n    this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n    this.elm.selectionStart = this.start;\n    this.elm.selectionEnd = this.end;\n    return this;\n  }\n  insertText(text) {\n    // Most of the used APIs only work with the field selected\n    this.elm.focus();\n    this.elm.setRangeText(text);\n    this.value = this.elm.value;\n    this.position();\n    return this;\n  }\n  getSelectedValue(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    return this.value.slice(typeof start === 'number' && !isNaN(start) ? start : selectionStart, typeof end === 'number' && !isNaN(end) ? start : selectionEnd);\n  }\n  getLineStartNumber() {\n    var start = this.start;\n    while (start > 0) {\n      start--;\n      if (this.value.charAt(start) === '\\n') {\n        start++;\n        break;\n      }\n    }\n    return start;\n  }\n  /** Indent on new lines */\n  getIndentText() {\n    var start = this.getLineStartNumber();\n    var str = this.getSelectedValue(start);\n    var indent = '';\n    str.replace(/(^(\\s)+)/, (str, old) => indent = old);\n    return indent;\n  }\n  lineStarInstert(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => text + txt).join('\\n')).position(oldStart + text.length, this.end);\n    }\n    return this;\n  }\n  lineStarRemove(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      var reg = new RegExp(\"^\" + text, 'g');\n      var newStart = oldStart - text.length;\n      if (!reg.test(str)) {\n        newStart = oldStart;\n      }\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => txt.replace(reg, '')).join('\\n')).position(newStart, this.end);\n    }\n  }\n  /** Notify any possible listeners of the change */\n  notifyChange() {\n    var event = new Event('input', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.elm.dispatchEvent(event);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}